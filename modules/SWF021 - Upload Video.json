{
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "upload_to_YT",
              "type": "boolean"
            },
            {
              "name": "WHICH_YT_CHANNEL"
            },
            {
              "name": "title"
            },
            {
              "name": "description"
            },
            {
              "name": "hashtags"
            },
            {
              "name": "attribution"
            },
            {
              "name": "tags"
            },
            {
              "name": "YT_privacy_status"
            },
            {
              "name": "video_url"
            },
            {
              "name": "thumbnail_url"
            },
            {
              "name": "channel_playlists",
              "type": "array"
            },
            {
              "name": "upload_to_GGL",
              "type": "boolean"
            },
            {
              "name": "WHICH_GGL_ACCOUNT"
            },
            {
              "name": "GGL_base_path"
            },
            {
              "name": "audio_url"
            },
            {
              "name": "avatar_url"
            }
          ]
        }
      },
      "id": "798e54f5-6e88-4662-8264-7c17e8067453",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        4032,
        416
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "49867fe6-35c2-4662-b6d4-5c077a8c32d3",
              "leftValue": "={{ $json.upload_to_YT }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4480,
        176
      ],
      "id": "bc4f18e4-780c-49dc-a0d5-798a6534c26f",
      "name": "If upload_to_YT"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c5a86a08-f50c-4f2d-9af6-0487149b9cb6",
              "leftValue": "={{ $json.upload_to_GGL }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4480,
        704
      ],
      "id": "581f77e2-5265-4623-967f-68b5e6a54902",
      "name": "If upload_to_GGL"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "TwoORkurvdqFlkEV",
          "mode": "list",
          "cachedResultName": "SWF007 - Upload to YT"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "embeddable": true,
            "notify_subscribers": true,
            "public_stats_viewable": true,
            "made_for_kids": false,
            "WHICH_YOUTUBE_CHANNEL": "={{ $json.WHICH_YT_CHANNEL }}",
            "title": "={{ $json.title }}",
            "description": "={{ $json.description }}",
            "hashtags": "={{ $json.hashtags }}",
            "tags": "={{ $json.tags }}",
            "video_url": "={{ $json.video_url }}",
            "attribution": "={{ $json.attribution }}",
            "privacy_status": "={{ $json.YT_privacy_status }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "WHICH_YOUTUBE_CHANNEL",
              "displayName": "WHICH_YOUTUBE_CHANNEL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "region_code",
              "displayName": "region_code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "category_id",
              "displayName": "category_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "language_id",
              "displayName": "language_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "attribution",
              "displayName": "attribution",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "embeddable",
              "displayName": "embeddable",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "boolean"
            },
            {
              "id": "license",
              "displayName": "license",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "notify_subscribers",
              "displayName": "notify_subscribers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "boolean"
            },
            {
              "id": "privacy_status",
              "displayName": "privacy_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "public_stats_viewable",
              "displayName": "public_stats_viewable",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "boolean"
            },
            {
              "id": "publish_at",
              "displayName": "publish_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "made_for_kids",
              "displayName": "made_for_kids",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "boolean"
            },
            {
              "id": "tags",
              "displayName": "tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "video_url",
              "displayName": "video_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4704,
        128
      ],
      "id": "d802da98-f7d0-4ee6-ac66-8ba2fd4ca384",
      "name": "Upload_to_YT"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AragCmiBa8midzt2",
          "mode": "list",
          "cachedResultName": "Upload to GGL"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "WHICH_GGL_ACCOUNT": "={{ $json.WHICH_GGL_ACCOUNT }}",
            "input_file_url": "={{ $json.audio_url }}",
            "save_file_path": "={{ $json.GGL_base_path }}/audio",
            "save_file_name": "={{ $json.title }}.mp3"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "WHICH_GGL_ACCOUNT",
              "displayName": "WHICH_GGL_ACCOUNT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "input_file_url",
              "displayName": "input_file_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_path",
              "displayName": "save_file_path",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_name",
              "displayName": "save_file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4704,
        512
      ],
      "id": "2eb9ec7d-a094-4578-9b03-bae3344d7343",
      "name": "Upload Audio to GGL"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AragCmiBa8midzt2",
          "mode": "list",
          "cachedResultName": "Upload to GGL"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "WHICH_GGL_ACCOUNT": "={{ $json.WHICH_GGL_ACCOUNT }}",
            "save_file_path": "={{ $json.GGL_base_path }}/avatar",
            "input_file_url": "={{ $json.avatar_url }}",
            "save_file_name": "={{ $json.title }}.jpg"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "WHICH_GGL_ACCOUNT",
              "displayName": "WHICH_GGL_ACCOUNT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "input_file_url",
              "displayName": "input_file_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_path",
              "displayName": "save_file_path",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_name",
              "displayName": "save_file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4704,
        896
      ],
      "id": "8492db71-7a65-4a6b-a417-a21ad5599910",
      "name": "Upload Avatar to GGL"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AragCmiBa8midzt2",
          "mode": "list",
          "cachedResultName": "Upload to GGL"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "WHICH_GGL_ACCOUNT": "={{ $json.WHICH_GGL_ACCOUNT }}",
            "save_file_path": "={{ $json.GGL_base_path }}/thumbnail",
            "save_file_name": "={{ $json.title }}.jpg",
            "input_file_url": "={{ $json.thumbnail_url }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "WHICH_GGL_ACCOUNT",
              "displayName": "WHICH_GGL_ACCOUNT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "input_file_url",
              "displayName": "input_file_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_path",
              "displayName": "save_file_path",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_name",
              "displayName": "save_file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4704,
        1088
      ],
      "id": "88090ab1-98a9-4522-8a7f-0f348078b9f5",
      "name": "Upload Thumbnail to GGL"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AragCmiBa8midzt2",
          "mode": "list",
          "cachedResultName": "Upload to GGL"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "input_file_url": "={{ $json.video_url }}",
            "save_file_name": "={{ $json.title }}.mp4",
            "WHICH_GGL_ACCOUNT": "={{ $json.WHICH_GGL_ACCOUNT }}",
            "save_file_path": "={{ $json.GGL_base_path }}/video"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "WHICH_GGL_ACCOUNT",
              "displayName": "WHICH_GGL_ACCOUNT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "input_file_url",
              "displayName": "input_file_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_path",
              "displayName": "save_file_path",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "save_file_name",
              "displayName": "save_file_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4704,
        704
      ],
      "id": "b54290e1-8b73-4745-8bca-8fd12c1007e7",
      "name": "Upload Video to GGL"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4f9b108a-5ed3-4db5-8479-52e324faf948",
              "name": "title",
              "value": "={{ $json.title || \"video_\" + $now.toLocaleString().hash() }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4256,
        416
      ],
      "id": "f548f4ed-7a54-4c1a-8da9-146bcf9610f6",
      "name": "Input defaults"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        4704,
        320
      ],
      "id": "ff2a6946-b486-440d-915d-af0d61824b9f",
      "name": "No Upload to YT or GGL"
    },
    {
      "parameters": {
        "content": "# Upload Video\n## SWF021\n### Purpose\nControlled upload to YouTube and Google based on inputs.\n* If upload_to_YT is true calls Upload to YT and Update YT Thumbnail\n* If upload_to_GGL is true calls Upload to GGL to upload\n    * audio\n    * video\n    * avatar\n    * thumbnail\n### Input\n* upload_to_YT\n* WHICH_YT_CHANNEL\n* title\n* description\n* hashtags\n* attribution\n* tags\n* YT_privacy_status\n* video_url\n* thumbnail_url\n* channel_playlists\n* upload_to_GGL\n* WHICH_GGL_ACCOUNT\n* GGL_base_path\n* audio_url\n* avatar_url\n\n### Output\n* Nothing Useful -- the input fields are returned",
        "height": 752,
        "width": 560
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3424,
        144
      ],
      "id": "65d9b9f1-42c7-4e4c-8f9e-59524290377f",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 4,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4928,
        768
      ],
      "id": "8fddf80d-7da6-4aba-9b80-6473b34f2187",
      "name": "Merge GGL Data"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        5152,
        512
      ],
      "id": "98cebfee-c903-44c4-bd75-3f6bd2462072",
      "name": "Merge All Data"
    },
    {
      "parameters": {
        "content": "# PR5\n* Rename Update_YT_Thumbnail to Update_YT_Video\n* Start\n    * Add channel_playlists",
        "width": 528,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3440,
        944
      ],
      "id": "ad5e9895-4c0c-4517-a6cd-389de70cef47",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "z6vfuN71evezSHKG",
          "mode": "list",
          "cachedResultName": "SWF017 - Update YT Video"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "thumbnail_file_url": "={{ $('Start').first().json.thumbnail_url }}",
            "thumbnail_title": "={{ $('Start').first().json.title }}",
            "YT_Video_ID": "={{$json.uploadId}}",
            "WHICH_YOUTUBE_CHANNEL": "={{ $('Start').first().json.WHICH_YT_CHANNEL }}",
            "channel_playlists": "={{ $('Start').first().json.channel_playlists }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "WHICH_YOUTUBE_CHANNEL",
              "displayName": "WHICH_YOUTUBE_CHANNEL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "YT_Video_ID",
              "displayName": "YT_Video_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "thumbnail_file_url",
              "displayName": "thumbnail_file_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "thumbnail_title",
              "displayName": "thumbnail_title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "channel_playlists",
              "displayName": "channel_playlists",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        4928,
        128
      ],
      "id": "85f679a4-7a70-496d-9241-adcfda6e3778",
      "name": "Update YT Video"
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Input defaults",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If upload_to_YT": {
      "main": [
        [
          {
            "node": "Upload_to_YT",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Upload to YT or GGL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If upload_to_GGL": {
      "main": [
        [
          {
            "node": "Upload Audio to GGL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload Video to GGL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload Avatar to GGL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload Thumbnail to GGL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Upload to YT or GGL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload_to_YT": {
      "main": [
        [
          {
            "node": "Update YT Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Audio to GGL": {
      "main": [
        [
          {
            "node": "Merge GGL Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Avatar to GGL": {
      "main": [
        [
          {
            "node": "Merge GGL Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Upload Thumbnail to GGL": {
      "main": [
        [
          {
            "node": "Merge GGL Data",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Upload Video to GGL": {
      "main": [
        [
          {
            "node": "Merge GGL Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Input defaults": {
      "main": [
        [
          {
            "node": "If upload_to_YT",
            "type": "main",
            "index": 0
          },
          {
            "node": "If upload_to_GGL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge GGL Data": {
      "main": [
        [
          {
            "node": "Merge All Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Update YT Video": {
      "main": [
        [
          {
            "node": "Merge All Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Start": [
      {
        "upload_to_YT": true,
        "WHICH_YT_CHANNEL": "HOA_NIGHTMARES",
        "title": "Notice of Violation: A Fence Grows Taller Than Privacy in a Small Town Horror Unfolding",
        "description": "NOTICE OF VIOLATION crashes into my quiet life, and I feel a chill: a fence taller than privacy becomes a small town weapon, an invisible audit that watches every step I take. Privacy is private here. 😱👁️\n\nI study the notice, my name staring back from a header that feels ceremonial and cold. Fence Height Exceeds Community Standard. Then the specifics come through like a bad dream you can’t wake from the fence is taller than four feet, measured along the property line, and the HOA inspector notes noncompliant visual obstruction to street facing public view. The handwriting on the bottom is clean and official, a signature that belongs to someone who has never watched a fence grow taller by the hour and never had to decide whether privacy is a luxury or a contraband possession. I feel the weight of small-town surveillance settle on my shoulders as if the room itself learned my address and approved the verdict. 😳\n\nElena moves to the back door, the kind that sticks just a little if the humidity is high, and steps into the yard that used to feel like a private sanctuary, now suddenly a stage for a quiet, unremarkable war. The fence is a dark line against the sky, taller than it should be, the boards catching the light in slivered breaths, the top rail catching a stray gust that makes the whole thing look older than the house behind it. It isn’t the fence itself that stings as much as the sense that someone else decided the frame of her life should be visible to neighbors, to strangers who only drive by and pretend they’re not watching but always are. I tell myself the plan must be practical, that a thing this public can still be navigated in private, if I measure carefully and act slowly. \n\nBy dusk the plan crystallizes. If the community says four feet tops, then I will comply, not out of stubborn pride but because the alternative— bending the rules but not the town’s gaze— feels heavier on the tongue than the work of removing a few boards. It will be a project, a small one, the kind that separates the practical from the personal and then stitches them back together with a piece of string and a bright yellow tape measure. I descend the fence height to the letter of the law, or as close as I can, with a stubborn, almost ritualistic patience. A borrowed saw, a borrowed hammer, a handful of old nails saved for rainier days. The sound of the tool against wood is a white-noise partner to the neighbor’s lawnmower and the distant dog that never stops barking at nothing. The fence comes down in careful sections, each plank a confession I am willing to erase if the town will let me keep my sense of privacy intact. The boards groan and then accept their fate, as though they too have grown weary of being judged by their appearance rather than their purpose. 😶\n\nUnder the sun’s low glare I feel the room loosen, and I move through the house like a witness to a quiet ritual. The plan isn’t a rebellion but a boundary reweaving, a message whispered through nails and pine: privacy is mine to protect, not a rumor to be measured by a potluck crowd. The first cut is the hardest, the first breath after the decision, and it echoes in the yard long after the last board finds its place on the ground. The night air cools the edge of the wood, and I realize this is more than wood and rule books; it is a conversation with the town itself, a test of what it means to belong and what it costs to feel seen. 🔨🪵\n\nI know the next morning will bring more whispers, more debates about line drawings and sightlines, but I already know I will stand by the boundary I chose. The fence may be shorter, but its meaning grows taller with every neighbor’s glance, every gossip shared over coffee, every silent judgment held in the grocery aisles. I am not fleeing privacy, I am choosing it on my own terms, and I will live with the tension of a community that polices the frame of my life while pretending it is fair. Don’t forget to like, share, and subscribe!\n",
        "hashtags": "#horror #smalltown #privacy #noticeofviolation #fencehorror #surveillance #domestichorror",
        "attribution": "Copyright (C) 2025 Seasoned Solutions Advisor LLC",
        "tags": "horror, thriller, scary, creepy, privacy, small town, notice of violation, fence height, HOA, visual obstruction, surveillance, dread, rumor, neighbor watch, yard drama, domestic horror, psychological horror, community tension, boundary conflict",
        "YT_privacy_status": "private",
        "video_url": "https://n8n.connectcircuits.com/webhook/a60c3f68-7bcf-4504-a087-0fb9c7a3fce0/file/d0b77d841a4aa953d7db2bb9c71190822004d42cdc74ea9bd342d991c9bf6b5d.mp4",
        "thumbnail_url": "https://n8n.connectcircuits.com/webhook/a60c3f68-7bcf-4504-a087-0fb9c7a3fce0/file/a27ee7d6aec567728361c9b9690479b795092ba46608c3cbfad22952611ec975.jpg",
        "channel_playlists": null,
        "upload_to_GGL": false,
        "WHICH_GGL_ACCOUNT": null,
        "GGL_base_path": null,
        "audio_url": null,
        "avatar_url": "https://n8n.connectcircuits.com/webhook/a60c3f68-7bcf-4504-a087-0fb9c7a3fce0/file/90d0b1bf7817e416959c04f243de26aa13fbdab379c8ef6da495d71b18d1f1e4.jpg"
      }
    ]
  },
  "meta": {
    "instanceId": "37fe6d8c3b2aaeda95afa9d59c8cbc7c79e8171e6cc2a68043e239f8403c390e"
  }
}
