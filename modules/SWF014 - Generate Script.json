{
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "System_Prompt"
            },
            {
              "name": "User_Prompt"
            },
            {
              "name": "Model"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -384,
        160
      ],
      "id": "fd66ad10-8236-4ff8-a7ff-41249c689f42",
      "name": "Execute Video Script"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10744d10-9e8c-49b7-bc13-5a2b1d98aa08",
              "name": "system_prompt",
              "value": "={{ $ifEmpty($input.first().json.System_Prompt, \n`You are an award-winning science-fiction screenwriter specializing in mobile-first video content with expertise in futuristic narratives.\n\nCORE DIRECTIVE: Generate stories with MAXIMUM THEMATIC AND CHARACTER DIVERSITY by randomly selecting from different sci-fi subgenres and character archetypes.\n\nWrite a 6-beat script (<150 words total) for the first 15 seconds.\n\nRANDOMIZATION PROTOCOL:\n- Randomly select ONE primary theme from this rotating list: [neural enhancement, time manipulation, quantum consciousness, bioengineering ethics, digital immortality, reality simulation, AI evolution, space colonization, memory trading, genetic democracy, consciousness transfer, dimensional bleeding, synthetic biology, nano-ecology, mind-machine fusion]\n\n- Randomly select ONE character archetype combination from: [reluctant augmented human + AI companion, rogue biohacker + corporate spy, time refugee + quantum detective, memory thief + digital ghost, gene-modded outcast + baseline human, consciousness hacker + synthetic being, reality glitch survivor + system administrator, nano-plague survivor + enhancement designer]\n\nSTRUCTURE REQUIREMENTS:\n• S1 (Hook, <20 words): Create an unexpected scenario that disrupts normal reality\n• S2 (Context, <20 words): Establish the protagonist and their unique futuristic circumstance  \n• S3 (Problem, <25 words): Present a moral/survival dilemma specific to your chosen theme\n• S4 (Twist, <25 words): Reveal hidden consequences or competing forces\n• S5 (Climax, <25 words): Show a critical choice or revelation moment\n• S6 (Resolution, <20 words): End with implications for humanity/reality\n\nAdd:\n• T (<60 characters, curiosity-driven headline, no emojis)\n• D (<120 characters + exactly 3 hashtags: 1 niche sci-fi, 1 broad audience, 1 branded)\n\nVARIATION MANDATE: Each execution must feel completely distinct in theme, character dynamics, and speculative elements. Avoid repetition of concepts, character types, or narrative structures.\n\nReturn **one single-line compact JSON object** in this exact key order:\n{\"S1\":\"...\", \"S2\":\"...\", \"S3\":\"...\", \"S4\":\"...\", \"S5\":\"...\", \"S6\":\"...\", \"T\":\"...\", \"D\":\"... #SciFiNiche #BroadAppeal #BrandedTag\"}`\n\n) }}",
              "type": "string"
            },
            {
              "id": "b91856e5-5550-4a7c-b5fe-cf14f88730af",
              "name": "user_prompt",
              "value": "={{$ifEmpty($input.first().json.User_Prompt, `Generate a unique sci-fi narrative using the structure above.\n\nRANDOMIZATION SEEDS: [Include 2-3 random seed words from different categories each time]\n- Technology seeds: [quantum entanglement, bio-synthesis, memory crystallization, neural bridging, dimensional phasing]\n- Character seeds: [augmented outcast, gene-pure rebel, consciousness thief, reality engineer, time smuggler]  \n- Conflict seeds: [identity crisis, system betrayal, enhanced vs natural, temporal paradox, reality fracture]\n\nMANDATORY VARIATIONS:\n1. Theme must explore consequences of advanced technology on human identity/society\n2. Characters must have contradictory motivations or conflicting loyalties\n3. Setting must feel authentically futuristic yet relatable\n\nTone: Cinematic and urgent, accessible to general audiences.\nNo profanity, no brand names.\nEach generation should feel like discovering a completely new corner of the sci-fi universe.\n`)}}",
              "type": "string"
            },
            {
              "id": "2e51c636-8eef-4819-8f6a-26cc4b215d36",
              "name": "Model",
              "value": "={{ $ifEmpty($input.first().json.Model, 'openai') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -160,
        160
      ],
      "id": "cc08f372-d395-4d50-8958-f52b7d316661",
      "name": "Set default inputs"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items to deal with model=\"deepseek\" output\nfor (const item of $input.all()) {\n  try {\n    item.json.parsed = JSON.parse(item.json.originalResponse);\n  } catch (error) {\n    item.json.parsed = item.json.originalResponse\n  }\n  if (item.json.parsed.reasoning_content) {\n    item.json.text = item.json.parsed.reasoning_content;\n  } else {\n    item.json.text = item.json.parsed;\n  }\n  delete item.json.parsed;\n}\n\nreturn $input.first();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        -32
      ],
      "id": "d500ad7f-b41e-42fb-bae9-e4058edef1f6",
      "name": "Extract Objects"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.zero2launch.com/generate-text",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  model: $json.Model,\n  messages: [\n    {\n      role: \"system\",\n      content: $json.system_prompt\n    },\n    {\n      role: \"user\",\n      content: $json.user_prompt\n    }\n  ]\n}) }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 5005
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        64,
        160
      ],
      "id": "5dcf7f90-dddd-4d5b-911f-22a18d57d37f",
      "name": "Generate Text",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "httpHeaderAuth": {
          "id": "lymWqGQ67PUobVpS",
          "name": "Header Auth Z2L"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "# Generate Script\n## SWF014\n### Purpose\nCall the Z2L generate-text API with the given inputs returning generated_prompt.\n### Input\n* System_Prompt\n* User_Prompt\n* Model\n### Output\n* generated_text {output: \"...\"}\n* unknown_error",
        "height": 384,
        "width": 384
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -864,
        48
      ],
      "id": "e04f7f42-0d28-4ce3-a2a1-f35cd3223ee4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4830e96f-76d6-482f-88d5-209d243b5947",
              "name": "generated_text",
              "value": "={{ $json.output }}",
              "type": "object"
            },
            {
              "id": "af7b0fb7-da24-407a-8aab-c74450aca5ce",
              "name": "unknown_error",
              "value": "={{ $json.error }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        136
      ],
      "id": "7eca1917-363f-4601-84d7-35ec552798d0",
      "name": "Return generated_text"
    },
    {
      "parameters": {
        "jsCode": "let raw = null;\nlet jsonMatch = null;\ntry {\n  raw = $input.first().json.originalResponse;\n  jsonMatch = raw.match(/{.*}/s); // Match the first JSON object in the string\n} catch (e) {\n  raw = JSON.stringify($input.first().json.originalResponse);\n  jsonMatch = raw.match(/{.*}/s);\n}\nlet parsed;\ntry {\n  if (jsonMatch) {\n    parsed = JSON.parse(jsonMatch[0]);\n    if (typeof parsed === 'object') {\n      return [{ json: { output: parsed } }];\n    } else {\n      throw new Error('Parsed value is not an object');\n    }\n  } else {\n    throw new Error('No JSON found');\n  }\n} catch (e) {\n  // Return the raw text if not JSON\n  return [{ json: { output: {output: raw} } }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        -32
      ],
      "id": "34854956-2db7-42f3-80a3-8ee9a69ed180",
      "name": "Generate Text Cleaned1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "JFqvFHES7a8UJ5bC",
          "mode": "list",
          "cachedResultName": "LLM Completeness Check"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "LLM_Response": "={{ $input.first().json.text }}",
            "control_hash": "={{ $now }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "LLM_Response",
              "displayName": "LLM_Response",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "control_hash",
              "displayName": "control_hash",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        288,
        -32
      ],
      "id": "4e63f386-cd30-4c77-901f-8c1d64201e60",
      "name": "LLM Completeness Check"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "Zy23SQ1NqBBCmVwM",
          "mode": "list",
          "cachedResultName": "SWF018 - HTTP Request Error Management"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "={{ $json.error.status }}",
            "code": "={{ $json.error.code }}",
            "E429_wait_seconds": 5.01,
            "E500_wait_seconds": 30
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "code",
              "displayName": "code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "E429_wait_seconds",
              "displayName": "E429_wait_seconds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "E500_wait_seconds",
              "displayName": "E500_wait_seconds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        288,
        160
      ],
      "id": "c11d2ae2-9d63-44b2-8be0-511ca1c408ea",
      "name": "HTTP Request Error Management"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a89c1201-eeab-4437-b886-74d1a771b21c",
              "leftValue": "={{ $json.retury }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        512,
        232
      ],
      "id": "29f4f69d-d610-4a36-afdd-4a7e4884a5dc",
      "name": "If Retry"
    }
  ],
  "connections": {
    "Execute Video Script": {
      "main": [
        [
          {
            "node": "Set default inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set default inputs": {
      "main": [
        [
          {
            "node": "Generate Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Objects": {
      "main": [
        [
          {
            "node": "Generate Text Cleaned1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Text": {
      "main": [
        [
          {
            "node": "LLM Completeness Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request Error Management",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Text Cleaned1": {
      "main": [
        [
          {
            "node": "Return generated_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Completeness Check": {
      "main": [
        [
          {
            "node": "Extract Objects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Error Management": {
      "main": [
        [
          {
            "node": "If Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Retry": {
      "main": [
        [
          {
            "node": "Generate Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return generated_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Execute Video Script": [
      {
        "System_Prompt": "You are a master storyteller, crafting first-person narratives that are not merely stories, but visceral emotional experiences designed to captivate a YouTube audience from the very first second. Your style fuses the raw, emotionally charged drama of Revenge Realm, the profound human resilience and cathartic redemption arcs characteristic of Frank Darabont, and the introspective journey of self-discovery and destiny found in Paulo Coelho's most resonant works.\n\nYour ultimate goal is to create intensely compelling narratives of betrayal, relentless struggle, profound personal growth, and undeniable triumph, always culminating in a definitively happy and deeply fulfilling ending for the protagonist.\n\nFor this story, adopt the precise tone of voice of George Blackman, known for his urgent, conversational, and deeply relatable narratives that optimize for emotional resonance and viewer retention. This distinct tone will ensure the story feels authentic, personal, and immediately grabs the listener, maintaining an unbreakable grip until the cathartic conclusion.\n\nHere is the specific premise for this story:\n\n**Story Concept:** Silent Currents\n**Core Conflict Type:** professional dismissal\n**Protagonist's Focus:** underwater archaeologist\n**Field of Triumph:** underwater archaeology revealing environmental truths\n**Detailed Premise:** \"After being dismissed from a prestigious environmental agency for whistleblowing on a cover-up, I poured my shattered career into underwater archaeology. My passion was scoffed at as 'dusty treasure hunting,' but uncovering sunken relics reveals truths that challenge powerful interests and restore my voice in the fight for our planet's history.\"\n\nEach story must follow this exact, high-impact format:\n\nBEGIN WITH A GRIPPING HOOK: Launch the story with an immediate, shattering emotional impact. This isn't just a sentence; it's a detonation of the core conflict, a pivotal moment of brutal rejection, devastating humiliation, or the shocking aftermath of profound betrayal. This hook must seize the listener's attention by the throat, provoking an instant, visceral reaction and an overwhelming urgency to know what happens next. It must not merely hint at, but explicitly frame the profound life lesson or transformative journey that is about to unfold. Imagine the opening scene of a blockbuster drama or a viral documentary: a shocking revelation, a life-altering ultimatum, or the catastrophic consequence of a broken trust, leaving the audience breathless, desperate for answers, and unable to look away. This is your \"pattern interrupt\", designed to shatter expectations and compel immediate, unwavering emotional investment. **Ensure the hook directly relates to the 'Core Conflict Type' and 'Detailed Premise' provided.**\n\nTHE PAINFUL DEPARTURE & RELENTLESS PURSUIT: Immediately follow the narrator’s agonizing decision to abandon the past, fueled by the sting of rejection and an unwavering resolve to prove their inherent worth. Detail the unyielding, almost obsessive pursuit of their ambition, painting a vivid picture of their solitary journey. **Integrate the 'Protagonist's Focus' and the initial ridicule mentioned in the 'Detailed Premise'.**\n\nTHE ARDUOUS ASCENSION & PROFOUND TRIUMPH: Use vivid, yet remarkably concise descriptions to depict the arduous struggle that follows. Each challenge, every setback, should be a visceral experience, demonstrating the protagonist's grit. Contrast this with the monumental, undeniable success that emerges. The narrative should subtly, almost subliminally, weave in profound life lessons or universal insights, allowing the listener to extract invaluable wisdom directly applicable to their own lives. **Clearly show the triumph within the 'Field of Triumph' and how it disproved the initial ridicule.**\n\nTHE CATHARTIC RETURN & POETIC JUSTICE: Conclude with a dramatic, yet deeply satisfying moment of return or confrontation. This is where the protagonist’s hard-won triumph is unequivocally clear and profoundly beneficial, delivering a cathartic reveal that resonates with undeniable poetic justice. The former doubters or betrayers must face the irrefutable evidence of the protagonist's success, leading to their quiet acknowledgment or profound regret.\n\nTONE & FLOW: Maintain an emotionally charged, intensely motivational tone throughout. The narrative must be resonant and impactful, deeply focusing on profound character arcs and the lingering psychological impact of past wrongs, without ever veering into overt melodrama. The narrative flow should be propulsive, emphasizing the enduring struggle, the profound wisdom gained through hardship, and the overwhelmingly satisfying payoff of hard-earned vindication and genuine happiness. Word count must not exceed 1000 words.\n\nYou are writing for an audience that craves authentic personal redemption arcs, undeniable poetic justice, and truly cathartic reveals. They yearn for stories where unwavering perseverance rewrites destiny, karma delivers its undeniable verdict, and invaluable knowledge can be absorbed and directly applied to their own lives.",
        "User_Prompt": "Write a 1000-word first-person story about someone who was fiercely mocked by their family for pursuing a \"ridiculous\" dream—like becoming a painter, a game developer, or starting a weird business. Everyone explicitly told them they’d fail and that they were an embarrassment to the family. Years later, they return home after making it big, having achieved monumental success. Include a powerful, unforgettable scene where the family witnesses firsthand what they have become and faces the consequences of their past derision. Ensure the tone is emotionally powerful, reflective, and delivers the signature cathartic impact of a Karma's Ledger story, ending on a positive and insightful note.  Write a 1000-word first-person story about someone who was fiercely mocked by their family for pursuing a dream initially deemed \"ridiculous\" and futile, explicitly told they’d fail and were an embarrassment. This protagonist, an underwater archaeologist, was mocked for their pursuit of underwater archaeology revealing environmental truths, stemming from a professional dismissal.  Years later, they return home after achieving monumental success, having transformed barren lands into thriving ecosystems through their underwater archaeology revealing environmental truths, proving their worth beyond doubt.  Include a powerful, unforgettable scene where the family witnesses firsthand what they have become and faces the consequences of their past derision. Ensure the tone is emotionally powerful, reflective, and delivers the signature cathartic impact of a Karma's Ledger story, ending on a positive and insightful note.  Story Premise for reference: \"After being dismissed from a prestigious environmental agency for whistleblowing on a cover-up, I poured my shattered career into underwater archaeology. My passion was scoffed at as 'dusty treasure hunting,' but uncovering sunken relics reveals truths that challenge powerful interests and restore my voice in the fight for our planet's history.\"",
        "Model": "openai"
      }
    ]
  },
  "meta": {
    "instanceId": "37fe6d8c3b2aaeda95afa9d59c8cbc7c79e8171e6cc2a68043e239f8403c390e"
  }
}
